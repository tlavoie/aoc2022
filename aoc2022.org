* General
- Thought: Try to do as many of these as possible.
- Make the process of setting up each day's task as easy as possible.
- Target language: Haskell
- Not doing anything Nix-specific to start at least, just running the
  ghc, cabal binaries I have already installed through Nix.
  - Cabal update fetched package list from hackage.
  - Maybe later, try updating one to Nix-specific format, then go
    forward with that.
* Date notes
** 01
- Input is single text file, one integer per line, with blank lines
  separating lists.
- e.g.:
8890
13468
5519
4939

4580
3529

2917

1329
4004
3553
- Created default files with "cabal init" and mostly default values.
- Idea: Reading all the lines should give me [ String ], which I can
  then process to get [ [ String ] ]
- From there, can map over the top-level list, to get a list of
  parsed, added integers, from which I can get the max.
  - e.g. [ [ String ] ] -> [ [ Int ] ] -> [ Int ] -> Int
  - Alterate: [ String ] -> [ Int ] -> [ [ Int ] ] -> [ [ Int ] ] -> Int
- For this challenge at least, there is no need to keep things in an
  indexed or identifiable order.
- Outer: start with empty list to accumulate into
- Inner: start with empty list, accumulate parsed Int values until
  empty string.
  - Then continue with rest of full list
- What I ended up doing was a bit simpler:
  - One function to fetch the lines
  - One to gather the contents according to the data pattern. (Ints
    were converted on the fly, as they were the only valid non-empty
    strings).
  - Couple of folds to extract the pieces we care about, for the
    two-part answer.
** 02
- Note: The game calendar rolls over at 9 PM Pacific, so apparently
  it is based in Eastern time zone.
- This one was very simple, as the input parsing was much easier. Note
  though, someone else did Day 1 just splitting on "\n\n", which would
  indeed be simpler than what I did.
** 03 --- Day 3: Rucksack Reorganization ---
- Lower-case and upper-case letters provide the priority, 1-26 and
  27-52 respectively.
- Each line needs splitting in half, find the common letter between
  each half, and sum these priorities.
  - The common value sounds like turning each into a set, find the
    intersection.
  - The big challenge was in understanding the use of fmap to take a
    list of Just Int values, and get a total out of that.
- For puzzle 2, we are biting off three rows at a time from the input,
  to find the common letter and its value, which will then be added
  together.
- Fortunately, we know there are 300 lines of input, so we can call it
  100 times without worrying about a partial input.
- I was going to use "take 3" to get the inputs, but splitAt is nicer,
  and gives us the tail to do it again.
** 04 --- Day 4: Camp Cleanup ---
- Likely the easiest one yet, especially since I had an ancient
  string-split routine from my LogSnort code from years ago.
- I never did use my checkLargeSmall function, since they seem to
  insist on providing fairly friendly inputs so far. (e.g., ranges
  could also be valid if the first number was higher than the second,
  but they didn't do that at all.)
